{
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "tsconfigRootDir": "./",
        "project": "tsconfig.json",
        "ecmaVersion": "latest",
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "plugins": [
        "react",
        "@typescript-eslint",
        "react-hooks",
        "sort-imports-es6-autofix",
        "unused-imports",
        "eslint-plugin-no-inline-styles"
    ],
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:react/recommended",
        "plugin:react/jsx-runtime"
    ],
    "rules": {
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/unbound-method": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/member-delimiter-style": [
            "error"
        ],
        "@typescript-eslint/member-ordering": [
            "error",
            {
                "classes": [
                    // Fields
                    "public-static-field",
                    "public-instance-field",
                    "private-static-field",
                    "private-instance-field",
                    // Constructors 
                    "public-constructor",
                    "private-constructor",
                    // Methods
                    "public-static-method",
                    "public-instance-method",
                    "private-static-method",
                    "protected-instance-method",
                    "private-instance-method"
                ]
            }
        ],
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "interface",
                "format": [
                    "PascalCase"
                ],
                "custom": {
                    "regex": "^I[A-Z]",
                    "match": true
                }
            }
        ],
        /* "@typescript-eslint/no-magic-numbers" rule extends the base eslint/no-magic-numbers,
       we must disable the base rule as it can report incorrect errors */
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": [
            "error",
            {
                "ignoreEnums": true,
                "ignoreNumericLiteralTypes": true,
                "ignoreReadonlyClassProperties": true,
                "ignore": [
                    -1,
                    0,
                    1
                ],
                "ignoreArrayIndexes": true
            }
        ],
        // we must disable the base rule as it can report incorrect errors
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": [
            "error",
            "all",
            {
                "ignoreJSX": "multi-line"
            }
        ],
        "@typescript-eslint/array-type": [
            "error",
            {
                "default": "array",
                "readonly": "array"
            }
        ],
        "@typescript-eslint/prefer-for-of": [
            "error"
        ],
        // we must disable the base rule as it can report incorrect errors
        "quotes": "off",
        "@typescript-eslint/quotes": [
            "error"
        ],
        // we must disable the base rule as it can report incorrect errors
        "semi": "off",
        "@typescript-eslint/semi": [
            "error"
        ],
        // we must disable the base rule as it can report incorrect errors
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": [
            "error"
        ],
        // we must disable the base rule as it can report incorrect errors
        "no-return-await": "off",
        "@typescript-eslint/return-await": [
            "error",
            "in-try-catch"
        ],
        "sort-imports-es6-autofix/sort-imports-es6": [
            2,
            {
                "ignoreCase": true,
                "ignoreMemberSort": false,
                "memberSyntaxSortOrder": [
                    "all",
                    "multiple",
                    "single",
                    "none"
                ]
            }
        ],
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "prev": "*",
                "next": "return"
            }
        ],
        "no-duplicate-imports": "error",
        "no-irregular-whitespace": "error",
        "prefer-spread": "error",
        "arrow-body-style": [
            "error",
            "as-needed"
        ],
        "no-bitwise": "off",
        "prefer-const": "error",
        "prefer-object-spread": "error",
        "one-var": [
            "error",
            "never"
        ],
        "comma-dangle": "off",
        "no-return-assign": [
            "error",
            "always"
        ],
        "max-len": [
            "error",
            {
                "code": 120,
                "tabWidth": 2,
                "comments": 120,
                "ignoreUrls": true,
                "ignoreStrings": true
            }
        ],
        "prefer-arrow-callback": [
            "error",
            {
                "allowNamedFunctions": false,
                "allowUnboundThis": true
            }
        ],
        "no-else-return": "error",
        "object-shorthand": [
            "error",
            "always"
        ],
        "no-console": "error",
        "max-classes-per-file": [
            "error",
            1
        ],
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "error",
        "no-undef": "off",
        "no-case-declarations": "off",
        "react/display-name": [
            "off",
            {
                "ignoreTranspilerName": true
            }
        ],
        "react/prop-types": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "unused-imports/no-unused-imports": "error",
        "no-inline-styles/no-inline-styles": "error"
    }
}